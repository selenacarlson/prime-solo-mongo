1. Create a collection named orders.
    
    db.createCollection('orders');
    let orders = db.orders;

2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
    
    orders.insert( { orderDate: new ISODate('2017-02-03'), orderTotal: 55, lineItems: 
    [ {unitPrice: 100, quantity: 3, productName: "frog" }] } );

    orders.insert( { orderDate: new ISODate('2017-04-04'), orderTotal: 66, lineItems: 
    [ {unitPrice: 50, quantity: 2, productName: "bog" }] } );

    orders.insert( { orderDate: new ISODate('2017-01-02'), orderTotal: 77, lineItems: 
    [ {unitPrice: 25, quantity: 6, productName: "log" }] } );

3. Find all orders and make them look pretty.
    
    orders.find().pretty();

4. Find all orders with an orderDate that is after 1/31/2017.

    orders.find({orderDate: {$gt: new Date('2017-01-31')}});    

5. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)

    orders.update({"orderDate" : ISODate("2017-01-02T00:00:00Z")}, {$set: {orderTotal: 63}} );

6. Add another lineItem to the order from 4/4/2017

    orders.update({"orderDate" : ISODate("2017-04-04T00:00:00Z")}, {$push: { lineItems: {unitPrice: 30, quantity: 2, productName: "smog" }  } } );

7. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's

    orders.update({"orderDate" : ISODate("2017-02-03T00:00:00Z")}, {$set: { "lineItems.0.productName": "transistor radio" }});
    orders.update({"orderDate" : ISODate("2017-02-03T00:00:00Z")}, {$set: { "lineItems.0.quantity": 2 }});

8. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $

    orders.find({ $and:[ {orderTotal: {$gt: 2}}, {orderTotal: {$lt: 10}} ] });


